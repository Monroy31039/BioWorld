"0","library(nnet)   # multinom"
"0","library(dplyr)"
"0","set.seed(123)"
"0",""
"0","datos_imp <- nuevamuestra"
"0","cat_vars <- c(""Educación"",""Dinero"",""Hipertensión"",""Diabetes"","
"0","              ""Cigarrillo"",""Basuco"",""Marihuana"",""Vida"",""Violencia"",""Localidad"")"
"0","num_vars <- c(""Tiempo"",""Edad"")"
"0","vars_all <- c(cat_vars, num_vars)"
"0","# 1) Asegurar tipos"
"0","# Convertir a factor las categóricas si no lo son"
"0","for(v in cat_vars){"
"0","  if(!v %in% names(datos_imp)) stop(""Variable faltante en el dataset: "", v)"
"0","  if(!is.factor(datos_imp[[v]])) datos_imp[[v]] <- as.factor(datos_imp[[v]])"
"0","}"
"0","# Numéricas"
"0","for(v in num_vars){"
"0","  if(!v %in% names(datos_imp)) stop(""Variable faltante en el dataset: "", v)"
"0","  datos_imp[[v]] <- as.numeric(as.character(datos_imp[[v]]))"
"0","}"
"0",""
"0",""
"0","# 2) Fix explícito inmediato para Tiempo usando Edad+Localidad si hay NAs"
"0","# (esto asegura que Tiempo quede imputado si el loop anterior lo dejó)"
"0","if(sum(is.na(datos_imp$Tiempo)) > 0) {"
"0","  idx_obs  <- which(!is.na(datos_imp$Tiempo) & !is.na(datos_imp$Edad))"
"0","  idx_miss <- which(is.na(datos_imp$Tiempo))"
"0","  if(length(idx_obs) >= 5) {"
"0","    # intentar Tiempo ~ Edad + Localidad (si Localidad tiene info)"
"0","    form_try <- ""Tiempo ~ Edad"""
"0","    if(sum(!is.na(datos_imp$Localidad)) > 0) form_try <- ""Tiempo ~ Edad + Localidad"""
"0","    fit_t <- try(lm(as.formula(form_try), data = datos_imp, subset = idx_obs), silent = TRUE)"
"0","    if(!inherits(fit_t, ""try-error"")) {"
"0","      preds <- try(predict(fit_t, newdata = datos_imp[idx_miss, , drop = FALSE]), silent = TRUE)"
"0","      if(inherits(preds, ""try-error"") || any(is.na(preds))) {"
"0","        # fallback: si predict falla para algunos, predecir por Edad simple"
"0","        preds2 <- try(predict(lm(Tiempo ~ Edad, data = datos_imp, subset = idx_obs),"
"0","                              newdata = datos_imp[idx_miss, , drop = FALSE]), silent = TRUE)"
"0","        if(!inherits(preds2, ""try-error"")) preds <- ifelse(is.na(preds), preds2, preds)"
"0","      }"
"0","      # residual bootstrap noise"
"0","      resid_pool <- try(resid(fit_t), silent = TRUE)"
"0","      if(inherits(resid_pool, ""try-error"") || length(resid_pool) == 0) resid_pool <- 0"
"0","      noise <- sample(resid_pool, size = length(preds), replace = TRUE)"
"0","      imput_vals <- preds + noise"
"0","      # truncar: Tiempo >= 0 y <= Edad"
"0","      imput_vals <- pmax(imput_vals, 0.5)"
"0","      imput_vals <- pmin(imput_vals, datos_imp$Edad[idx_miss], na.rm = TRUE)"
"0","      # si todavía hay NA en imput_vals, rellenar con mediana"
"0","      na_check <- which(is.na(imput_vals))"
"0","      if(length(na_check) > 0) {"
"0","        imput_vals[na_check] <- median(datos_imp$Tiempo, na.rm = TRUE)"
"0","      }"
"0","      datos_imp$Tiempo[idx_miss] <- imput_vals"
"0","    } else {"
"0","      # fallback simple: mediana si no se puede ajustar"
"0","      datos_imp$Tiempo[idx_miss] <- median(datos_imp$Tiempo, na.rm = TRUE)"
"0","    }"
"0","  } else {"
"0","    # muy pocos observados: imputar por mediana directamente"
"0","    datos_imp$Tiempo[idx_miss] <- median(datos_imp$Tiempo, na.rm = TRUE)"
"0","  }"
"0","}"
"0",""
"0","# 3) Loop compacto: imputar el resto de variables con NA"
"0","# Ordenamos variables por NA ascendente y procesamos solo las que tienen NA"
"0","na_counts <- sapply(datos_imp[vars_all], function(x) sum(is.na(x)))"
"0","ord <- names(sort(na_counts))"
"0","ord <- ord[na_counts[ord] > 0]   # solo con NAs"
"0",""
"0","draw_from_prob_matrix <- function(prob_matrix, colnames_levels) {"
"0","  n <- nrow(prob_matrix)"
"0","  draws <- character(n)"
"0","  for (i in seq_len(n)) {"
"0","    p <- prob_matrix[i, ]"
"0","    if (any(is.na(p)) || sum(p, na.rm = TRUE) == 0) {"
"0","      marg <- colMeans(prob_matrix, na.rm = TRUE)"
"0","      if (all(is.na(marg)) || sum(marg, na.rm=TRUE) == 0) {"
"0","        p <- rep(1/length(p), length(p))"
"0","      } else {"
"0","        marg[is.na(marg)] <- 1e-6"
"0","        p <- marg / sum(marg, na.rm = TRUE)"
"0","      }"
"0","    } else {"
"0","      p <- p / sum(p, na.rm = TRUE)"
"0","    }"
"0","    draws[i] <- sample(colnames_levels, size = 1, prob = p)"
"0","  }"
"0","  draws"
"0","}"
"0",""
"0","for (v in ord) {"
"0","  cat(""Imputando:"", v, "" - NAs iniciales:"", sum(is.na(datos_imp[[v]])), ""\n"")"
"0","  nas <- which(is.na(datos_imp[[v]]))"
"0","  obs <- which(!is.na(datos_imp[[v]]))"
"0","  if (length(nas) == 0) next"
"0","  "
"0","  # predictores disponibles (al menos 1 obs no-NA)"
"0","  preds <- setdiff(vars_all, v)"
"0","  preds2 <- preds[sapply(datos_imp[preds], function(x) sum(!is.na(x))) > 0]"
"0","  if (length(preds2) == 0) {"
"0","    # fallback por marginal"
"0","    if (v %in% num_vars) {"
"0","      datos_imp[[v]][nas] <- median(datos_imp[[v]], na.rm = TRUE)"
"0","    } else {"
"0","      tab <- table(datos_imp[[v]])"
"0","      moda <- names(tab)[which.max(tab)]"
"0","      datos_imp[[v]][nas] <- moda"
"0","      datos_imp[[v]] <- factor(datos_imp[[v]], levels = levels(datos_imp[[v]]))"
"0","    }"
"0","    next"
"0","  }"
"0","  "
"0","  # Si numérica: lm estocástico con Edad+Localidad si posible"
"0","  if (v %in% num_vars) {"
"0","    # preferir Edad + Localidad si existen"
"0","    prefer_preds <- intersect(preds2, c(""Edad"",""Localidad""))"
"0","    if (length(prefer_preds) == 0) prefer_preds <- preds2"
"0","    form_n <- as.formula(paste(v, ""~"", paste(prefer_preds, collapse = "" + "")))"
"0","    fitn <- try(lm(form_n, data = datos_imp, subset = obs), silent = TRUE)"
"0","    if (inherits(fitn, ""try-error"")) {"
"0","      # fallback mediana"
"0","      datos_imp[[v]][nas] <- median(datos_imp[[v]], na.rm = TRUE)"
"0","    } else {"
"0","      preds_hat <- predict(fitn, newdata = datos_imp[nas, , drop = FALSE])"
"0","      # si algunos preds NA, intentar predecir con Edad sola"
"0","      if (any(is.na(preds_hat))) {"
"0","        if(""Edad"" %in% names(datos_imp)) {"
"0","          preds2b <- try(predict(lm(as.formula(paste(v, ""~ Edad"")), data = datos_imp, subset = obs),"
"0","                                newdata = datos_imp[nas[is.na(preds_hat)], , drop = FALSE]), silent = TRUE)"
"0","          if(!inherits(preds2b, ""try-error"")) preds_hat[is.na(preds_hat)] <- preds2b"
"0","        }"
"0","      }"
"0","      resid_pool <- try(resid(fitn), silent = TRUE)"
"0","      if (inherits(resid_pool, ""try-error"") || length(resid_pool)==0) resid_pool <- 0"
"0","      noise <- sample(resid_pool, size = length(preds_hat), replace = TRUE)"
"0","      imput_vals <- preds_hat + noise"
"0","      imput_vals <- pmax(imput_vals, 0)"
"0","      # truncar por Edad si existe"
"0","      if(""Edad"" %in% names(datos_imp)) {"
"0","        imput_vals <- pmin(imput_vals, datos_imp$Edad[nas])"
"0","      }"
"0","      imput_vals[is.na(imput_vals)] <- median(datos_imp[[v]], na.rm = TRUE)"
"0","      datos_imp[[v]][nas] <- imput_vals"
"0","    }"
"0","    next"
"0","  }"
"0","  "
"0","  # Categórica:"
"0","  lvls <- levels(datos_imp[[v]])"
"0","  nlv <- length(lvls)"
"0","  obs_complete <- obs[complete.cases(datos_imp[obs, preds2, drop = FALSE])]"
"0","  miss_idx <- nas"
"0","  if (length(obs_complete) < 5) {"
"0","    # fallback moda"
"0","    tab <- table(datos_imp[[v]])"
"0","    moda <- names(tab)[which.max(tab)]"
"0","    datos_imp[[v]][miss_idx] <- moda"
"0","    datos_imp[[v]] <- factor(datos_imp[[v]], levels = lvls)"
"0","    next"
"0","  }"
"0","  if (nlv == 2) {"
"0","    # logit"
"0","    form_g <- as.formula(paste(v, ""~"", paste(preds2, collapse = "" + "")))"
"0","    fitg <- try(glm(form_g, data = datos_imp, family = binomial, subset = obs_complete), silent = TRUE)"
"0","    if (inherits(fitg, ""try-error"")) {"
"0","      tab <- table(datos_imp[[v]])"
"0","      moda <- names(tab)[which.max(tab)]"
"0","      datos_imp[[v]][miss_idx] <- moda"
"0","      datos_imp[[v]] <- factor(datos_imp[[v]], levels = lvls)"
"0","      next"
"0","    }"
"0","    probs <- try(predict(fitg, newdata = datos_imp[miss_idx, , drop = FALSE], type = ""response""), silent = TRUE)"
"0","    if (inherits(probs, ""try-error"")) probs <- rep(NA, length(miss_idx))"
"0","    draws <- sapply(seq_along(miss_idx), function(i) {"
"0","      p <- probs[i]"
"0","      if (is.na(p)) {"
"0","        prop1 <- mean(as.character(datos_imp[[v]])[obs] == lvls[2], na.rm = TRUE)"
"0","        if (is.na(prop1) || prop1 == 0) p_use <- 0.5 else p_use <- prop1"
"0","      } else p_use <- p"
"0","      rbinom(1, 1, p_use)"
"0","    })"
"0","    imput_vals <- ifelse(draws == 1, lvls[2], lvls[1])"
"0","    datos_imp[[v]][miss_idx] <- factor(imput_vals, levels = lvls)"
"0","  } else {"
"0","    # multinomial"
"0","    form_m <- as.formula(paste(v, ""~"", paste(preds2, collapse = "" + "")))"
"0","    fitm <- try(multinom(form_m, data = datos_imp, subset = obs_complete, trace = FALSE), silent = TRUE)"
"0","    if (inherits(fitm, ""try-error"")) {"
"0","      tab <- table(datos_imp[[v]])"
"0","      moda <- names(tab)[which.max(tab)]"
"0","      datos_imp[[v]][miss_idx] <- moda"
"0","      datos_imp[[v]] <- factor(datos_imp[[v]], levels = lvls)"
"0","      next"
"0","    }"
"0","    probs <- try(predict(fitm, newdata = datos_imp[miss_idx, , drop = FALSE], type = ""probs""), silent = TRUE)"
"0","    if (inherits(probs, ""try-error"") || is.null(probs)) {"
"0","      tab <- table(datos_imp[[v]])"
"0","      moda <- names(tab)[which.max(tab)]"
"0","      datos_imp[[v]][miss_idx] <- moda"
"0","      datos_imp[[v]] <- factor(datos_imp[[v]], levels = lvls)"
"0","      next"
"0","    }"
"0","    if (is.vector(probs)) {"
"0","      probs <- matrix(probs, nrow = 1)"
"0","    }"
"0","    imput_draws <- draw_from_prob_matrix(probs, colnames(probs))"
"0","    datos_imp[[v]][miss_idx] <- factor(imput_draws, levels = lvls)"
"0","  }"
"0","  cat("" -> NAs restantes en"", v, "":"", sum(is.na(datos_imp[[v]])), ""\n"")"
"0","}"
"1","Imputando:"
"1"," "
"1","Hipertensión"
"1"," "
"1"," - NAs iniciales:"
"1"," "
"1","10"
"1"," "
"1","
"
"1"," -> NAs restantes en"
"1"," "
"1","Hipertensión"
"1"," "
"1",":"
"1"," "
"1","0"
"1"," "
"1","
"
"1","Imputando:"
"1"," "
"1","Diabetes"
"1"," "
"1"," - NAs iniciales:"
"1"," "
"1","10"
"1"," "
"1","
"
"1"," -> NAs restantes en"
"1"," "
"1","Diabetes"
"1"," "
"1",":"
"1"," "
"1","0"
"1"," "
"1","
"
"1","Imputando:"
"1"," "
"1","Basuco"
"1"," "
"1"," - NAs iniciales:"
"1"," "
"1","10"
"1"," "
"1","
"
"1"," -> NAs restantes en"
"1"," "
"1","Basuco"
"1"," "
"1",":"
"1"," "
"1","0"
"1"," "
"1","
"
"1","Imputando:"
"1"," "
"1","Marihuana"
"1"," "
"1"," - NAs iniciales:"
"1"," "
"1","11"
"1"," "
"1","
"
"1"," -> NAs restantes en"
"1"," "
"1","Marihuana"
"1"," "
"1",":"
"1"," "
"1","0"
"1"," "
"1","
"
"1","Imputando:"
"1"," "
"1","Cigarrillo"
"1"," "
"1"," - NAs iniciales:"
"1"," "
"1","12"
"1"," "
"1","
"
"1"," -> NAs restantes en"
"1"," "
"1","Cigarrillo"
"1"," "
"1",":"
"1"," "
"1","0"
"1"," "
"1","
"
"1","Imputando:"
"1"," "
"1","Violencia"
"1"," "
"1"," - NAs iniciales:"
"1"," "
"1","14"
"1"," "
"1","
"
"1"," -> NAs restantes en"
"1"," "
"1","Violencia"
"1"," "
"1",":"
"1"," "
"1","0"
"1"," "
"1","
"
"1","Imputando:"
"1"," "
"1","Dinero"
"1"," "
"1"," - NAs iniciales:"
"1"," "
"1","17"
"1"," "
"1","
"
"1"," -> NAs restantes en"
"1"," "
"1","Dinero"
"1"," "
"1",":"
"1"," "
"1","0"
"1"," "
"1","
"
"1","Imputando:"
"1"," "
"1","Vida"
"1"," "
"1"," - NAs iniciales:"
"1"," "
"1","18"
"1"," "
"1","
"
"1"," -> NAs restantes en"
"1"," "
"1","Vida"
"1"," "
"1",":"
"1"," "
"1","0"
"1"," "
"1","
"
"1","Imputando:"
"1"," "
"1","Educación"
"1"," "
"1"," - NAs iniciales:"
"1"," "
"1","58"
"1"," "
"1","
"
"1"," -> NAs restantes en"
"1"," "
"1","Educación"
"1"," "
"1",":"
"1"," "
"1","0"
"1"," "
"1","
"
"0","# 4) Reporte final"
"0","cat(""\nResumen final de NAs por variable después de imputación:\n"")"
"1","
Resumen final de NAs por variable después de imputación:
"
"0","print(sapply(datos_imp[vars_all], function(x) sum(is.na(x))))"
"1","   Educación "
"1","      Dinero "
"1","Hipertensión "
"1","    Diabetes "
"1","  Cigarrillo "
"1","      Basuco "
"1","   Marihuana "
"1","        Vida "
"1","   Violencia "
"1","   Localidad "
"1","      Tiempo "
"1","
"
"1","           0 "
"1","           0 "
"1","           0 "
"1","           0 "
"1","           0 "
"1","           0 "
"1","           0 "
"1","           0 "
"1","           0 "
"1","           0 "
"1","           0 "
"1","
"
"1","        Edad "
"1","
"
"1","           0 "
"1","
"
